/* TASK ONE: LINEAR REGRESSION ON HOUSING PRICES

Implement linear regression to predict housing prices based on features like
square footage, number of bedrooms, and location. Use a dataset like the
Boston Housing dataset for training and evaluation.*/



# Import necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt

# Load the dataset
file_path = r'C:\Users\ACER\Desktop\archive (7)\BostonHousing.csv'
data = pd.read_csv(file_path)

# Features and target selection
X = data[['rm', 'lstat', 'ptratio']]  # Independent variables
y = data['medv']  # Target variable

X , y

# Preprocessing: Handle missing values
# Option 1: Impute missing values with the mean
X.fillna(X.mean(), inplace=True)
y.fillna(y.mean(), inplace=True)

# Drop rows with missing values (uncomment if preferred)
# data = data.dropna()
# X = data[['rm', 'lstat', 'ptratio']]
# y = data['medv']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and train the Linear Regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Predict on the test set
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse}")
print(f"R^2 Score: {r2}")

# Visualization of predictions (for one feature, e.g., 'rm')
plt.scatter(X_test['rm'], y_test, color='blue', label='Actual')
plt.scatter(X_test['rm'], y_pred, color='red', label='Predicted')
plt.xlabel('Average Number of Rooms (rm)')
plt.ylabel('Median Value of Homes (medv)')
plt.title('Actual vs Predicted Prices')
plt.legend()
plt.show()
